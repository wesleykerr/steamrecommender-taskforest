# This is a sample taskforestd configuration file

# Please change all settings to values that make sense
# for you.

# These are the four required command line arguments to
# taskforest
log_dir          = "/usr/local/taskforest/logs"
family_dir       = "/usr/local/taskforest/families"
job_dir          = "/usr/local/taskforest/jobs"
calendar_dir     = "/usr/local/taskforest/calendar"
instructions_dir = "/usr/local/taskforest/instructions"

# This is a file that ensures that only one child
#  process can accept connections at any time
lock_file       = "/usr/local/taskforest/lock_file"

# The HTTP server document_root
document_root   = "/usr/local/taskforest/htdocs"

# The host on which the taskforest daemon will run
host            = "localhost"

# The port on which to listen for connections
port            = 1111

# The number of children available at any time
child_count     = 2

# The number of requests each child process should
# serve before exiting.
# (To protect from memory leaks, etc)
requests_per_child = 40

# Every time a child dies wait this much time (in
# seconds) before starting a new child. Do NOT set
# this value to less than 1, otherwise you may
# encounter CPU thrashing.  Set it to something like
# 10 seconds if you're testing.
respawn_wait    = 1

# my default, log stdout messages with status >= this.
# This only effects stdout
# The sequence of thresholds (smallest to largest is):
# debug, info, warn, error, fatal
log_threshold   = "info"

# These file names should NOT end with '.0' or '.1' 
# because then they will be mistaken for job log files
#log_file        = "taskforestd.%Y%m%d.%H%M%S.stdout"  
#err_file        = "taskforestd.%Y%m%d.%H%M%S.stderr"  
log_file        = "taskforestd.stdout"  
err_file        = "taskforestd.stderr"  
pid_file        = "taskforestd.pid"

# Run as a daemon (detach from terminal)
run_as_daemon   = 1

# 
# In order for the web site to work, you must have
# at least one valid user set up.  As the commented
# examples below show, you may have more than one.
# The value of each valid_user option is the login
# followed by a colon (:) followed by a crypt hash
# of the password.  There are many ways to generate
# the crypt hash, including using the crypt perl
# function.  You can also use the gen_password
# script included with this release.
#
valid_user = "wkerr:NfOW9DPhvXmBs"
#valid_user = "foo:jp8Xizm2S52yw"

# The path to the server private key file
#server_key_file   = "certs/server-key.pem"

# The path to the server certificate
#server_cert_file  = "certs/server-cert.pem"
